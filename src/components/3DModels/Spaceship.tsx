/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 spaceshipOptimized.glb -t -T -o Spaceship.tsx 
Files: spaceshipOptimized.glb [18.75MB] > C:\Users\mateu\OneDrive\Documentos\Coding\Schorn.io Codebase\mobile_vr_experience\spaceshipOptimized-transformed.glb [166.62KB] (99%)
Author: Exiolite (https://sketchfab.com/Exiolite)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/spaceship-carelia-9f0b7bb00d6241ac80e772b79d6cecce
Title: SpaceShip "Carelia"
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { toRotation } from "../../utils/toRotation";
import { toPosition } from "../../utils/toPosition";
import { PATH_3D_MODELS } from "./path";
import { schornColors } from "../../constants/schornColors";
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Cube001_Material007_0: THREE.Mesh;
    Cube001_Engines_0: THREE.Mesh;
    Cube001_Glass_0: THREE.Mesh;
    Cube001_Weapons_0: THREE.Mesh;
  };
  materials: {
    ["Material.007"]: THREE.MeshStandardMaterial;
    Engines: THREE.MeshStandardMaterial;
    Glass: THREE.MeshStandardMaterial;
    Weapons: THREE.MeshStandardMaterial;
  };
};

export function Spaceship() {
  const { nodes, materials } = useGLTF(
    `${PATH_3D_MODELS}/spaceshipOptimized-transformed.glb`
  ) as GLTFResult;
  const ref = useRef<THREE.Group | null>(null);
  const [movement, setMovement] = useState({
    up: false,
    down: false,
    left: false,
    right: false,
  });
  const speed = 1;

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case "w":
          setMovement((prev) => ({ ...prev, up: true }));
          break;
        case "s":
          setMovement((prev) => ({ ...prev, down: true }));
          break;
        case "a":
          setMovement((prev) => ({ ...prev, left: true }));
          break;
        case "d":
          setMovement((prev) => ({ ...prev, right: true }));
          break;
      }
    };

    const handleKeyUp = (e: KeyboardEvent) => {
      switch (e.key) {
        case "w":
          setMovement((prev) => ({ ...prev, up: false }));
          break;
        case "s":
          setMovement((prev) => ({ ...prev, down: false }));
          break;
        case "a":
          setMovement((prev) => ({ ...prev, left: false }));
          break;
        case "d":
          setMovement((prev) => ({ ...prev, right: false }));
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, []);

  useFrame(() => {
    if (ref.current) {
      const delta = speed / 10;
      const { up, down, left, right } = movement;

      if (up) {
        ref.current.position.y += delta;
        ref.current.rotation.y -= 0.001;
      }
      if (down) {
        ref.current.position.y -= delta;
        ref.current.rotation.y += 0.001;
      }
      if (left) {
        ref.current.position.x -= delta;
        ref.current.rotation.y += 0.005;
      }
      if (right) {
        ref.current.position.x += delta;
        ref.current.rotation.y -= 0.005;
      }
    }
  });

  return (
    <group
      ref={ref}
      dispose={null}
      scale={0.4}
      position={toPosition({
        positionBottom: 3,
        positionIn: 6,
      })}
      rotation={toRotation({
        rotationXInDeg: -10,
        rotationYInRad: -Math.PI / 2,
      })}
    >
      <mesh
        geometry={nodes.Cube001_Material007_0.geometry}
        material={materials["Material.007"]}
        // scale={16.453}
      />
      <mesh
        geometry={nodes.Cube001_Engines_0.geometry}
        material={materials.Engines}
        // scale={16.453}
      />
      <mesh
        geometry={nodes.Cube001_Glass_0.geometry}
        material={materials.Glass}
        // scale={16.453}
      />
      <mesh
        geometry={nodes.Cube001_Weapons_0.geometry}
        material={materials.Weapons}
      />
    </group>
  );
}

useGLTF.preload(`${PATH_3D_MODELS}/spaceshipOptimized-transformed.glb`);
